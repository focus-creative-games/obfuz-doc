"use strict";(self.webpackChunkobfuz=self.webpackChunkobfuz||[]).push([[6408],{5389:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"beginner/quick-start","title":"Quick Start","description":"Obfuz supports Unity 2019+ and Unite Engine 1.0.0+, working correctly on all platforms supported by Unity and Unite Engine.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/beginner/quick-start.md","sourceDirName":"beginner","slug":"/beginner/quick-start","permalink":"/en/docs/beginner/quick-start","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/beginner/quick-start.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"\u5165\u95e8","permalink":"/en/docs/getting-started"},"next":{"title":"Multiple Obfuscated Assemblies","permalink":"/en/docs/beginner/multi-assemblies-to-obfuscate"}}');var s=t(4848),a=t(8453);const r={},c="Quick Start",o={},d=[{value:"Create a Project",id:"create-a-project",level:2},{value:"Installation",id:"installation",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Generate Encryption Virtual Machine and Keys",id:"generate-encryption-virtual-machine-and-keys",level:2},{value:"Add Code",id:"add-code",level:2},{value:"Attach Script",id:"attach-script",level:2},{value:"Build &amp; Run",id:"build--run",level:2},{value:"View Obfuscated Assembly-CSharp",id:"view-obfuscated-assembly-csharp",level:2}];function l(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"quick-start",children:"Quick Start"})}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsx)(n.p,{children:"Obfuz supports Unity 2019+ and Unite Engine 1.0.0+, working correctly on all platforms supported by Unity and Unite Engine."})}),"\n",(0,s.jsxs)(n.p,{children:["This document will guide you through creating an Obfuz sample project from scratch. For the complete sample project, see ",(0,s.jsx)(n.a,{href:"https://github.com/focus-creative-games/obfuz-samples/tree/main/QuickStart",children:"QuickStart"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"create-a-project",children:"Create a Project"}),"\n",(0,s.jsxs)(n.p,{children:["Create an empty Unity project. Create a main scene and add it to the scene list in the ",(0,s.jsx)(n.code,{children:"Build Settings"})," window."]}),"\n",(0,s.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,s.jsx)(n.p,{children:"Obfuz's Unity Package Manager URL installation addresses:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["gitee ",(0,s.jsx)(n.code,{children:"https://gitee.com/focus-creative-games/obfuz.git"})]}),"\n",(0,s.jsxs)(n.li,{children:["github ",(0,s.jsx)(n.code,{children:"https://github.com/focus-creative-games/obfuz.git"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Open the Unity Package Manager window, click ",(0,s.jsx)(n.code,{children:"Add package from URL..."}),", and enter one of the above addresses to complete the installation."]}),"\n",(0,s.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,s.jsxs)(n.p,{children:["For simplicity, we will configure the default assembly ",(0,s.jsx)(n.code,{children:"Assembly-CSharp"})," as the assembly to be obfuscated."]}),"\n",(0,s.jsxs)(n.p,{children:["Open the ",(0,s.jsx)(n.code,{children:"Obfuz/Settings..."})," menu, expand the ",(0,s.jsx)(n.code,{children:"Assembly Settings"})," item, and add ",(0,s.jsx)(n.code,{children:"Assembly-CSharp"})," to the ",(0,s.jsx)(n.code,{children:"Assemblies To Obfuscate"})," configuration."]}),"\n",(0,s.jsx)(n.h2,{id:"generate-encryption-virtual-machine-and-keys",children:"Generate Encryption Virtual Machine and Keys"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Run the menu ",(0,s.jsx)(n.code,{children:"Obfuz/GenerateEncryptionVM"})," to generate encryption virtual machine code. The default generated code file is ",(0,s.jsx)(n.code,{children:"Assets/Obfuz/GeneratedEncryptionVirtualMachine.cs"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["Run the menu ",(0,s.jsx)(n.code,{children:"Obfuz/GenerateSecretKeyFile"})," to generate two key files. The default output files are ",(0,s.jsx)(n.code,{children:"Assets/Resources/Obfuz/defaultStaticSecretKey.bytes"})," and ",(0,s.jsx)(n.code,{children:"Assets/Resources/Obfuz/defaultDynamicSecretKey.bytes"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"add-code",children:"Add Code"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Create a ",(0,s.jsx)(n.code,{children:"Bootstrap.cs"})," code file in the ",(0,s.jsx)(n.code,{children:"Assets"})," directory with the following content:"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'using Obfuz;\nusing Obfuz.EncryptionVM;\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\n\npublic class Bootstrap : MonoBehaviour\n{\n    // After initializing EncryptionService, the obfuscated code can run normally,\n    // so initialize it as early as possible.\n    [RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.AfterAssembliesLoaded)]\n    private static void SetUpStaticSecretKey()\n    {\n        Debug.Log("SetUpStaticSecret begin");\n        EncryptionService<DefaultStaticEncryptionScope>.Encryptor = new GeneratedEncryptionVirtualMachine(Resources.Load<TextAsset>("Obfuz/defaultStaticSecretKey").bytes);\n        Debug.Log("SetUpStaticSecret end");\n    }\n\n    int Add(int a, int b)\n    {\n        return a + b + 1;\n    }\n\n    // Start is called before the first frame update\n    void Start()\n    {\n        Debug.Log("Hello, Obfuz");\n        int a = Add(10, 20);\n        Debug.Log($"a = {a}");\n    }\n}\n\n'})}),"\n",(0,s.jsx)(n.h2,{id:"attach-script",children:"Attach Script"}),"\n",(0,s.jsxs)(n.p,{children:["Create a GameObject in the scene, then attach the ",(0,s.jsx)(n.code,{children:"Bootstrap"})," script to this GameObject."]}),"\n",(0,s.jsx)(n.p,{children:"Test run in Unity Editor to ensure there are no errors."}),"\n",(0,s.jsx)(n.h2,{id:"build--run",children:"Build & Run"}),"\n",(0,s.jsxs)(n.p,{children:["Run ",(0,s.jsx)(n.code,{children:"Build And Run"})," in ",(0,s.jsx)(n.code,{children:"Build Settings"})," to build and run. Obfuz will insert obfuscation operations for Assembly-CSharp during the build process.\nThe original file is backed up to ",(0,s.jsx)(n.code,{children:"Library/Obfuz/{buildTarget}/OriginalAssemblies/Assembly-CSharp.dll"}),".\nThe obfuscated file is backed up to ",(0,s.jsx)(n.code,{children:"Library/Obfuz/{buildTarget}/ObfuscatedAssemblies/Assembly-CSharp.dll"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"Check Player.log to verify that the running log is consistent with the Editor running result."}),"\n",(0,s.jsx)(n.h2,{id:"view-obfuscated-assembly-csharp",children:"View Obfuscated Assembly-CSharp"}),"\n",(0,s.jsxs)(n.p,{children:["Use ",(0,s.jsx)(n.a,{href:"https://github.com/icsharpcode/ILSpy",children:"ILSpy"})," to open ",(0,s.jsx)(n.code,{children:"Library/Obfuz/{buildTarget}/ObfuscatedAssemblies/Assembly-CSharp.dll"}),".\nYou will find that the assembly has indeed been obfuscated."]}),"\n",(0,s.jsx)(n.p,{children:"The obfuscated Boostrap class code becomes:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'\nusing $a;\nusing $A;\nusing UnityEngine;\n\npublic class Bootstrap : MonoBehaviour\n{\n    [RuntimeInitializeOnLoadMethod(/*Could not decode attribute arguments.*/)]\n    private static void SetUpStaticSecretKey()\n    {\n        Debug.Log((object)"SetUpStaticSecret begin");\n        $A.$C<$c>.$L = new global::$a.$A(Resources.Load<TextAsset>("Obfuz/defaultStaticSecretKey").bytes);\n        Debug.Log((object)"SetUpStaticSecret end");\n    }\n\n    private int $a(int 1, int 1)\n    {\n        return 1 + 1 + $A.$C<$c>.$I($d.$A, 0, 14, -2097817526);\n    }\n\n    private void Start()\n    {\n        $e.$a($A.$C<$c>.$K($d.$A, 4, 12, 169, 534648667), $A.$C<$c>.$d(1718597184, 154, 2114032877));\n        int num = $e.$A(this, $A.$C<$c>.$I($d.$A, 16, 27, -201418147), $A.$C<$c>.$I($d.$A, 20, 153, -875938825), $A.$C<$c>.$d(1757957431, 242, 760404455));\n        $e.$a(string.Format($A.$C<$c>.$K($d.$A, 24, 7, 10, 1708888075), num), $A.$C<$c>.$d(1718597184, 154, 2114032877));\n    }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["You can see that even though we didn't mark Bootstrap as non-obfuscated, didn't disable obfuscation for the SetUpStaticSecretKey function with ",(0,s.jsx)(n.code,{children:"[RuntimeInitializeOnLoadMethod]"}),", and didn't mark Awake and Start functions as non-obfuscated, Obfuz will automatically recognize these special Unity types and functions, not obfuscate their names, but still obfuscate their function bodies."]}),"\n",(0,s.jsx)(n.p,{children:"This is the power and convenience of Obfuz. It is deeply integrated with Unity workflows, simplifying obfuscation configuration as much as possible."})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>c});var i=t(6540);const s={},a=i.createContext(s);function r(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);