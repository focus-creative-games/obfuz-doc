"use strict";(self.webpackChunkobfuz=self.webpackChunkobfuz||[]).push([[941],{4049:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"beginner/dynamic-secret-key","title":"Using Dynamic Secret Key","description":"Dynamic secrets are suitable for modules that execute their logic after running for a period of time, often used in hot update assemblies. For detailed documentation, see Encryption.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/beginner/dynamic-secret-key.md","sourceDirName":"beginner","slug":"/beginner/dynamic-secret-key","permalink":"/en/docs/beginner/dynamic-secret-key","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/beginner/dynamic-secret-key.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Custom Obfuscation Rules","permalink":"/en/docs/beginner/configuration"},"next":{"title":"Obfuz+HybridCLR","permalink":"/en/docs/beginner/work-with-hybridclr"}}');var i=t(4848),c=t(8453);const r={},a="Using Dynamic Secret Key",d={},o=[{value:"Installation",id:"installation",level:2},{value:"Project Setup",id:"project-setup",level:2},{value:"Generate Encryption Virtual Machine and Keys",id:"generate-encryption-virtual-machine-and-keys",level:2},{value:"Create Related Assemblies and Code",id:"create-related-assemblies-and-code",level:2},{value:"Mount Script",id:"mount-script",level:2},{value:"Build &amp; Run",id:"build--run",level:2},{value:"View Obfuscated Assembly-CSharp Assembly",id:"view-obfuscated-assembly-csharp-assembly",level:2}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,c.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"using-dynamic-secret-key",children:"Using Dynamic Secret Key"})}),"\n",(0,i.jsxs)(n.p,{children:["Dynamic secrets are suitable for modules that execute their logic after running for a period of time, often used in hot update assemblies. For detailed documentation, see ",(0,i.jsx)(n.a,{href:"/en/docs/manual/encryption",children:"Encryption"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["This project demonstrates how to use dynamic secrets. For the complete sample project, see ",(0,i.jsx)(n.a,{href:"https://github.com/focus-creative-games/obfuz-samples/tree/main/DynamicSecretKey",children:"DynamicSecretKey"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,i.jsxs)(n.p,{children:["Same as ",(0,i.jsx)(n.a,{href:"/en/docs/beginner/quick-start",children:"Quick Start"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"project-setup",children:"Project Setup"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Add Assembly-CSharp and HotUpdate assemblies to the ",(0,i.jsx)(n.code,{children:"AssembliesToObfuscate"})," list in ",(0,i.jsx)(n.code,{children:"ObfuzSettings.AssemblySettings"})]}),"\n",(0,i.jsxs)(n.li,{children:["Set custom values for ",(0,i.jsx)(n.code,{children:"DefaultStaticSecretKey"})," and ",(0,i.jsx)(n.code,{children:"DefaultDynamicSecretKey"})," in ",(0,i.jsx)(n.code,{children:"ObfuzSettings.SecretSettings"})]}),"\n",(0,i.jsxs)(n.li,{children:["Add ",(0,i.jsx)(n.code,{children:"HotUpdate"})," to the ",(0,i.jsx)(n.code,{children:"AssembliesUsingDynamicSecretKey"})," list in ",(0,i.jsx)(n.code,{children:"ObfuzSettings.SecretSettings"})]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"generate-encryption-virtual-machine-and-keys",children:"Generate Encryption Virtual Machine and Keys"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Run the menu ",(0,i.jsx)(n.code,{children:"Obfuz/GenerateEncryptionVM"})," to generate encryption virtual machine code. The default generated code file is ",(0,i.jsx)(n.code,{children:"Assets/Obfuz/GeneratedEncryptionVirtualMachine.cs"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Run the menu ",(0,i.jsx)(n.code,{children:"Obfuz/GenerateSecretKeyFile"})," to generate two key files. The default output files are ",(0,i.jsx)(n.code,{children:"Assets/Resources/Obfuz/defaultStaticSecretKey.bytes"})," and ",(0,i.jsx)(n.code,{children:"Assets/Resources/Obfuz/defaultDynamicSecretKey.bytes"})]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"create-related-assemblies-and-code",children:"Create Related Assemblies and Code"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Create a ",(0,i.jsx)(n.code,{children:"HotUpdate"})," assembly with only one Entry class"]}),"\n",(0,i.jsx)(n.li,{children:"Create a Bootstrap class in the Assets directory"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"The Entry class code is as follows:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'\nusing UnityEngine;\n\npublic class Entry : MonoBehaviour\n{\n    void Start()\n    {\n        Debug.Log("Entry Start");\n    }\n}\n\n'})}),"\n",(0,i.jsx)(n.p,{children:"The Bootstrap class code is as follows:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'using Obfuz;\nusing Obfuz.EncryptionVM;\nusing UnityEngine;\n\n\npublic class Bootstrap : MonoBehaviour\n{\n    [ObfuzIgnore]\n    [RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.AfterAssembliesLoaded)]\n    private static void SetUpStaticSecretKey()\n    {\n        Debug.Log("SetUpStaticSecret begin");\n        EncryptionService<DefaultStaticEncryptionScope>.Encryptor = new GeneratedEncryptionVirtualMachine(Resources.Load<TextAsset>("Obfuz/defaultStaticSecretKey").bytes);\n        Debug.Log("SetUpStaticSecret end");\n    }\n\n    private static void SetUpDynamicSecret()\n    {\n        Debug.Log("SetUpDynamicSecret begin");\n        EncryptionService<DefaultDynamicEncryptionScope>.Encryptor = new GeneratedEncryptionVirtualMachine(Resources.Load<TextAsset>("Obfuz/defaultDynamicSecretKey").bytes);\n        Debug.Log("SetUpDynamicSecret end");\n    }\n\n\n    void Start()\n    {\n        // Delayed loading, load the dynamic key only before using the HotUpdate assembly code.\n        // If the project uses hot update, generally after the hot update is completed,\n        // load the dynamic key before loading the hot update code.\n        SetUpDynamicSecret();\n        this.gameObject.AddComponent<Entry>();\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"mount-script",children:"Mount Script"}),"\n",(0,i.jsxs)(n.p,{children:["Create a GameObject in the scene, then add the ",(0,i.jsx)(n.code,{children:"Bootstrap"})," script to this GameObject."]}),"\n",(0,i.jsx)(n.p,{children:"Run in Unity Editor to ensure there are no errors."}),"\n",(0,i.jsx)(n.h2,{id:"build--run",children:"Build & Run"}),"\n",(0,i.jsxs)(n.p,{children:["Run ",(0,i.jsx)(n.code,{children:"Build And Run"})," in ",(0,i.jsx)(n.code,{children:"Build Settings"})," to build and run. Check the Player.log to verify that the running log is consistent with the running result in the Editor."]}),"\n",(0,i.jsx)(n.h2,{id:"view-obfuscated-assembly-csharp-assembly",children:"View Obfuscated Assembly-CSharp Assembly"}),"\n",(0,i.jsxs)(n.p,{children:["Use ",(0,i.jsx)(n.a,{href:"https://github.com/icsharpcode/ILSpy",children:"ILSpy"})," to open ",(0,i.jsx)(n.code,{children:"Assembly-CSharp.dll"})," and ",(0,i.jsx)(n.code,{children:"HotUpdate.dll"})," under ",(0,i.jsx)(n.code,{children:"Library/Obfuz/{buildTarget}/ObfuscatedAssemblies"}),".\nYou will find that the assemblies are indeed obfuscated. And ",(0,i.jsx)(n.code,{children:"Assembly-CSharp"})," uses the static key, while ",(0,i.jsx)(n.code,{children:"HotUpdate"})," uses the dynamic key."]}),"\n",(0,i.jsxs)(n.p,{children:["The decompiled code of the obfuscated ",(0,i.jsx)(n.code,{children:"Bootstrap"})," class is as follows:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'using $a;\nusing $A;\nusing UnityEngine;\n\npublic class Bootstrap : MonoBehaviour\n{\n    [RuntimeInitializeOnLoadMethod(/*Could not decode attribute arguments.*/)]\n    private static void SetUpStaticSecretKey()\n    {\n        Debug.Log((object)"SetUpStaticSecret begin");\n        $A.$C<$A.$c>.$L = new global::$a.$A(Resources.Load<TextAsset>("Obfuz/defaultStaticSecretKey").bytes);\n        Debug.Log((object)"SetUpStaticSecret end");\n    }\n\n    private static void $a()\n    {\n        $d.$a($A.$C<$A.$c>.$K(global::$C.$A, 0, 24, 137, 1750859568), $A.$C<$A.$c>.$d(1718597184, 154, 2114032877));\n        $A.$C<$A.$B>.$L = new global::$a.$A($d.$b($d.$A($A.$C<$A.$c>.$K(global::$C.$A, 24, 29, 98, -1513390007), $A.$C<$A.$c>.$d(-394605899, 193, -1119998407)), $A.$C<$A.$c>.$d(1579960075, 194, -1028386777)));\n        $d.$a($A.$C<$A.$c>.$K(global::$C.$A, 53, 22, 61, -331274448), $A.$C<$A.$c>.$d(1718597184, 154, 2114032877));\n    }\n\n    private void Start()\n    {\n        $d.$B($A.$C<$A.$c>.$d(-1185287704, 255, -1146758192));\n        $d.$C($d.$c(this, $A.$C<$A.$c>.$d(694999971, 214, -840892815)), $A.$C<$A.$c>.$d(1262757717, 165, 2108602561));\n    }\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["The obfuscated ",(0,i.jsx)(n.code,{children:"Entry"})," class code is as follows:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"using $A;\nusing UnityEngine;\n\npublic class Entry : MonoBehaviour\n{\n    private void Start()\n    {\n        $C.$a($A.$C<$A.$B>.$K($c.$A, 0, 11, 128, -835666756), $A.$C<$A.$B>.$d(1717964360, 44, -2091590008));\n    }\n}\n\n"})})]})}function u(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var s=t(6540);const i={},c=s.createContext(i);function r(e){const n=s.useContext(c);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(c.Provider,{value:n},e.children)}}}]);