"use strict";(self.webpackChunkobfuz=self.webpackChunkobfuz||[]).push([[9664],{5016:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"manual/xlua/work-with-xlua","title":"Working with XLua","description":"Obfuz can work well with xLua, but requires minor adjustments to xLua and additional registration code execution.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/manual/xlua/work-with-xlua.md","sourceDirName":"manual/xlua","slug":"/manual/xlua/work-with-xlua","permalink":"/en/docs/manual/xlua/work-with-xlua","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/manual/xlua/work-with-xlua.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"xLua","permalink":"/en/docs/manual/xlua"},"next":{"title":"Deobfuscate Stack Trace","permalink":"/en/docs/manual/deobfuscate-stacktrace"}}');var a=n(4848),s=n(8453);const r={},o="Working with XLua",c={},l=[{value:"Compatibility Issues",id:"compatibility-issues",level:2},{value:"Register Type Mappings",id:"register-type-mappings",level:2},{value:"TODO",id:"todo",level:2}];function u(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"working-with-xlua",children:"Working with XLua"})}),"\n",(0,a.jsx)(t.p,{children:"Obfuz can work well with xLua, but requires minor adjustments to xLua and additional registration code execution."}),"\n",(0,a.jsx)(t.h2,{id:"compatibility-issues",children:"Compatibility Issues"}),"\n",(0,a.jsxs)(t.p,{children:["When xLua registers C# types, it doesn't directly use type name strings but calls Type.FullName, which causes the C# type names registered in lua code after obfuscation to actually be obfuscated names. Attempting to access C# classes with original names will result in ",(0,a.jsx)(t.code,{children:"type not found"})," errors!"]}),"\n",(0,a.jsxs)(t.p,{children:["A more thorough approach is to adjust the xlua implementation to use type name constant strings during registration. However, this approach requires significant changes because many xlua internal functions have ",(0,a.jsx)(t.code,{children:"Type"})," type parameters and call code like ",(0,a.jsx)(t.code,{children:"Type.FullName"})," or ",(0,a.jsx)(t.code,{children:"Type.Namespace"})," within the functions,\nand the original type names cannot be known at these call sites."]}),"\n",(0,a.jsxs)(t.p,{children:["We adopted a simpler solution: using Obfuz's provided ",(0,a.jsx)(t.code,{children:"ObfuscationTypeMapper"})," to get the original type name corresponding to Type, and modifying all code in xLua source that calls ",(0,a.jsx)(t.code,{children:"Type.FullName"}),"\nto use ",(0,a.jsx)(t.code,{children:"ObfuscationTypeMapper.GetOriginalTypeFullNameOrCurrent(type)"})," instead."]}),"\n",(0,a.jsxs)(t.p,{children:["Nearly ten places were modified in total. We won't list them all here. Please diff the code between ",(0,a.jsx)(t.a,{href:"https://github.com/focus-creative-games/obfuz-samples/tree/main/WorkWithXLua",children:"WorkWithLua"})," and ",(0,a.jsx)(t.a,{href:"https://github.com/Tencent/xLua/tree/master",children:"xLua"}),"."]}),"\n",(0,a.jsx)(t.h2,{id:"register-type-mappings",children:"Register Type Mappings"}),"\n",(0,a.jsxs)(t.p,{children:["For ObfuscationTypeMapper to work correctly, it requires pre-registration of the mapping relationship between Type and original type full names. Theoretically, you can write code like ",(0,a.jsx)(t.code,{children:'ObfuscationTypeMapper.RegisterType<My.TestClass>("My.TestClass")'}),",\nbut obviously, if there are many types to register, it's very easy to make mistakes. Additionally, with type name refactoring, you might forget to synchronously modify the code here."]}),"\n",(0,a.jsxs)(t.p,{children:["Fortunately, ",(0,a.jsx)(t.code,{children:"ObfuscationInstincts::RegisterReflectionType"})," provides a very convenient registration method. You can use ",(0,a.jsx)(t.code,{children:"ObfuscationInstincts::RegisterReflectionType<My.TestClass>()"}),"\nto correctly register the mapping relationship between type names and original names. There's some black magic involved here. For specific principles, see ",(0,a.jsx)(t.a,{href:"../obfuscation-instincts",children:"ObfuscationInstincts"}),"."]}),"\n",(0,a.jsx)(t.admonition,{type:"warning",children:(0,a.jsx)(t.p,{children:"Please register all type mappings before creating LuaEnv instances."})}),"\n",(0,a.jsx)(t.h2,{id:"todo",children:"TODO"}),"\n",(0,a.jsx)(t.p,{children:"In the future, Obfuz may further simplify the complexity of working with xLua."})]})}function d(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>o});var i=n(6540);const a={},s=i.createContext(a);function r(e){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),i.createElement(s.Provider,{value:t},e.children)}}}]);